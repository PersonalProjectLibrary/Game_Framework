一、BuildApp.cs里新增打包设置

1、BuildSetting添加参数：
原：
public class BuildSetting {  ... ...  }
改：
public class BuildSetting
{
    ... ...
    public bool IsHotFix = false;		// 是否热更
    public string HotPath = "";			// 对应原版本数据路径
    public int HotCount = 0;			// 热更次数
}

2、更新GetPCBuildSetting()里对自动打包的Jenkins的设置
原：
static BuildSetting GetPCBuildSetting()
{
    string[] parameters = Environment.GetCommandLineArgs();
    BuildSetting buildSetting = new BuildSetting();
    foreach (string str in parameters)
    {
        if (str.StartsWith("Version")){... ...}
        ...
    }
    return buildSetting;
}
改：
static BuildSetting GetPCBuildSetting()
{
    string[] parameters = Environment.GetCommandLineArgs();
    BuildSetting buildSetting = new BuildSetting();
    foreach (string str in parameters)
    {
        if (str.StartsWith("Version")){ ... ... }
        ... ...
        else if (str.StartsWith("IsHotFix"))
        {
            var tempParam = str.Split(new string[] { "=" }, StringSplitOptions.RemoveEmptyEntries);
            if (tempParam.Length == 2) bool.TryParse(tempParam[1], out buildSetting.IsHotFix);
        }
        else if (str.StartsWith("HotVerPath"))
        {
            var tempParam = str.Split(new string[] { "=" }, StringSplitOptions.RemoveEmptyEntries);
            if (tempParam.Length == 2) buildSetting.HotPath = tempParam[1].Trim();
        }
        else if (str.StartsWith("HotCount"))
        {
            var tempParam = str.Split(new string[] { "=" }, StringSplitOptions.RemoveEmptyEntries);
            if (tempParam.Length == 2) int.TryParse(tempParam[1], out buildSetting.HotCount);
        }
    }
    return buildSetting;
}

3、BuildPC里更新打包设置
如果打包设置里是进行热更IsHotFix，则不进行继续标准打包，改为热更打包。
原：
public static void BuildPC()
{
    BundleEditor.NormalBuild();//加入可热更打包的资源打包
    BuildSetting buildSetting = GetPCBuildSetting();
    string suffix = SetPcSetting(buildSetting);
    ... ...
}
改：
public static void BuildPC()
{
    BuildSetting buildSetting = GetPCBuildSetting();
    if (buildSetting.IsHotFix)
    {
        BundleEditor.Build(true, buildSetting.HotPath, buildSetting.HotCount.ToString());
        return;
    }
    BundleEditor.NormalBuild();//加入可热更打包的资源打包
    string suffix = SetPcSetting(buildSetting);
    ... ...
}

4、测试打包
个人没有做Jenkins打包工程，就不测试Jensins打包，这样也就做下Unity打包测试下
（1）删除旧打包资源：
删除BuildTarget/Windows里的打包
（2）做标准包打包：
菜单栏：Build--标准包，运行测试没问题
编辑器下和BuildTarget/Windows里的打包程序都可正常运行

（3）修改资源，进行热更打包，更新服务器热更资源配置
修改了Assets\GameData\Modle\benghuai里的Avatar_Kiana_C1_Texture_Face_Color_Common.png
菜单栏：Tools--打热更包
在Assets同级目录的Hot文件夹里查看热更包的文件
这里在此文本的同级目录下，有备份一份放到服务器上的热更资源文件，
方便其他设备测试项目，直接复制到服务器上测试；
（4）本地项目还原到热更前状态，编辑器下测试是否正常热更
将Assets同级目录下的AssetBundle里的ab资源文件复制到Assets/StreamingAssets文件夹里
将ResourceManager.cs里的m_LoadFormAssetBundle改为true；
点击运行，可以发现可正常热更加载；
（5）测试打包程序，
点击BuildTarget/Windows里的打包程序，可以发现正常下载加载热更资源运行；







