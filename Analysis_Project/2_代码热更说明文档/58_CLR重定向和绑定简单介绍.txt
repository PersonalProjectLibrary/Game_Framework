CLR重定向：
一些依赖反射的接口是没有办法直接运行的，
在Unity主工程中不能通过new T()的方式来创建热更工程中的类型实例；

ILRuntime为了解决这类问题，引入了CLR重定向机制：
当IL解译器发现需要调用某个指定CLR方法时，将实际调用重定向到另外一个方法进行挟持，
再在这个方法中对ILRuntime的反射的用法进行处理

1、CLR重定向定义
2、重定向的注册

有专门的CLR工具，写起来也很麻烦复杂，不要自己写！！！


CLR绑定：
通过反射来调用接口调用效率会比直接调用低很多，再加上反射传递函数参数时需要使用object[]数组，
这样不可避免的每次调用都会产生不少GC Alloc；

ILRuntime通过CLR方法绑定机制，可以选择性的对经常使用的CLR接口进行直接调用，
从而尽可能的消除反射调用开销以及额外的GC Alloc

CLR绑定借助了ILRuntime的CLR重定向机制来实现，
实质上也是将对CLR方法的反射调用重定向到我们自己定义的方法里面来

手动编写CLR重定向方法是个工作量非常巨大的事，而且要求对ILRuntime底层机制非常了解
ILRuntime提供了一个代码生成工具来自动生成CLR绑定代码。

注：
在CLR绑定代码生成之后，需要将这些绑定代码注册到AppDomain中才能使CLR绑定生效，
但是一定要记得将CLR绑定的注册写在CLR重定向的注册后面，
因为同一个方法只能被重定向一次，只有先注册的那个才能生效。















