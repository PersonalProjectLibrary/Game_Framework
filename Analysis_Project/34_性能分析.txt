一、项目做加密解密后存在 效率问题
每个ab包都要进行一次加密解密，才能正常加载

1、做加密解密前，加载ab包是LoadFromFile方式加载：
AssetBundle.LoadFromFile(configPath);
或AssetBundle.LoadFromFile(fullPath);
只会把文件头加载进来，不会把整个文件加载进来

2、而使用ab包的加密解密，加载ab包是LoadFromMemory方式加载：
AssetBundle.LoadFromMemory(abDecBytes);
会把解密后返回的整个解密文件（byte数组形式）加载进来，从内存中读取数据；

3、这样的结果，
1、优点：会使后面实例化真正使用资源时，加载东西会更快；
2、缺点：每个ab包的资源文件都读进内存中，格外占内容。

二、
解密方式，使用了FileStream流来读写文件；
初始资源，是放在Asset里的StreamingAssets文件夹下的；

存在问题：
在安卓平台下时，没有直接读取StreamingAssets目录的方法，
不能使用流直接、同步读取StreamingAssets下的资源文件。
只能通过www或UnityWebRequest方式读取。
这样导致当前AssetBundle加载框架有点不合适。

常规解决方法：下载游戏资源后的解压过程
把AssetStreaming下的文件拷贝到本地缓存目录(资源对应的下载目录)中，
加载路径就不是原来的：AssetBundleManager.cs里ABLoadPath路径；
而是：Application.persistentDataPath路径

优化方法：在不同平台设置不同的加载方式：
如：只是安卓平台不能同步读取资源文件，IOS和PC不影响，
则IOS和PC不做解压（把Streaming文件夹资源放到本地缓存文件夹中），正常加载。
安卓平台下再做解压。

